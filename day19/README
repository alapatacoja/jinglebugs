# Día 19: Resolución del Problema `Linen Layout`

## Descripción del Problema
Comprobar cuántos diseños son posibles con unos patrones dados.

---

## Motivación para Elegir este Problema
Elegimos este problema porque se podía resolver con Programación Dinámica.

---

## Técnicas y Estructuras de Datos Utilizadas
1. Recursión: Se utilizó recursión para comprobar si un diseño puede formarse utilizando los patrones dados.
2. Programación Dinámica con memoria: Se empleó para almacenar los resultados de subproblemas resueltos previamente y reutilizarlos, mejorando la eficiencia de la solución.
3. Vectores: Se utilizaron para almacenar los patrones y los diseños, facilitando su acceso y manipulación.
4. Cadenas: Para identificar si los patrones podían formar parte del diseño y para dividir dinámicamente las cadenas de los diseños.

---

## Descripción de la Solución
1. Se lee el archivo `input.txt`, que contiene los patrones y los diseños. Los patrones se almacenan en un vector y los diseños en otro.

2. Función Recursiva `comprobarPatrones`:
   - Esta función toma un diseño y verifica si puede ser generado utilizando los patrones. Se hace una búsqueda de patrones en el inicio de la cadena del diseño.
   - Si encuentra un patrón al principio, se llama recursivamente a la función con el resto del diseño, eliminando el patrón que ya ha sido utilizado.
   - Se utiliza una memoria para almacenar los resultados de subproblemas resueltos previamente y evitar cálculos repetidos, lo que optimiza el tiempo de ejecución.

3. Contar Diseños Válidos:
   - Para cada diseño, se invoca la función `comprobarPatrones` para verificar si es válido. Si es válido, se incrementa el contador de diseños válidos.

4. Salida:
   - Finalmente, se imprime el número total de diseños que pueden ser formados con los patrones disponibles.

---
