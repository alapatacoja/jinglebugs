# Día 3: Resolución del Problema `Mull It Over`

## Archivos Incluidos
		- 03.cpp (parte 1)
		- 03_2.cpp (parte 2)
      - puzzleinput.txt (datos)
		- README.md (este archivo)

## Descripción del Problema
Dada una "memoria dañada" (cadena de texto), identificar las intrucciones válidas: mul(x,y) y devolver el producto de sus componentes y el sumatorio de todos.

## Motivación para Elegir este Problema
Era el problema del día en advent code.

## Técnicas y Estructuras de Datos Utilizadas

1. Manejo de archivos (ifstream)
2. Expresiones regulares std::regex para encontrar patrones específicos
3. Iteradores sregex_iterator y bucle while para recorrer las coincidencias.


## Descripción de la Solución

1. Leer el puzzle `puzzleinput.txt` y almacenarlo en un vector `puzzle`. 
 
2. Recorrer el string `puzzle` con la libreria regex utilizando iteradores de la libreria y la expresión regex mul(R"(mul\((\d+),(\d+)\))") para encontrar todas las coincidencias con la instrucción válida mul(x,y) 

3. Hacer otra iteración con un bucle wile donde se recorre el string con las coincidencias encontradas y para poder operar con los enteros de la instruccion, los guardamos en dos variables int convirtiendolos con stoi (string to int).

4. Dentro del bucle, operar y avanzar. Por último, fuera del bucle se muestra el resultado

- En la segunda parte se añaden unos cambios para cumplir el nuevo requisito: las instrucciones contan de un do/dont delante que las habilitan o desactivan.


## Alternativas
Otra forma de haber hecho el ejercicio era mediante el uso de memoria en programación dinámica, pero no se implementó de esta forma debido a que en el inicio del advent code nos era más intuitivo de forma directa. 

## Valoracion
Este problema nos ayudó a desarrollar nuestro pensamiento crítico y estructurado para abordar el problema.