# Día 13: Resolución del Problema `Claw Contraption`

## Descripción del Problema
Calcular la cantidad mínima de monedas necesarias para conseguir el premio en una máquina de gancho.

---

## Motivación para Elegir este Problema
Elegimos este problema porque pensábamos que podría ser resuelto mediante Programación Dinámica, sin embargo, solucionarlo con un sistema de ecuaciones lineales era mucho más sencillo.

---

## Técnicas y Estructuras de Datos Utilizadas
1. Estructuras de Datos Personalizadas:
   - Se define una estructura `Maquina` para almacenar los valores de cada máquina. Era más práctico que un vector porque en la parte dos en vez de int se usa long long. 

2. Regex:
   - Utilizado para extraer valores desde el archivo `input.txt`.

---

## Descripción de la Solución

1. Se lee el archivo `input.txt` y, utilizando regex, se extraen las configuraciones de cada máquina (`ax`, `ay`, `bx`, `by`, `px`, `py`).

2. Para cada máquina, se calcula el determinante del sistema y se verifica que sea distinto de cero. Se calculan las soluciones `x` y `y` utilizando la fórmula de Cramer. Se valida que las soluciones sean enteras y menores a 100.

3. El costo total para una máquina es 3x + y, que se acumula en el resultado final.

4. Se imprime la suma total de monedas necesarias para todas las máquinas.

En la segunda parte se añade la dificultad de añadir a la posición de los premios 10000000000000.

---

## Alternativa
Como hemos mencionado anteriormente, al leer el ejercicio pensábamos que podría haber sido resuelto mediante programación dinámica, pero a la hora de empezar a desarrollar la solución descubrimos que se podía hacer fácilmente con un sistema de ecuaciones lineales. 

## Valoracion
Al ser el primer sistema de ecuaciones que hemos hecho en codigo, ha sido muy divertido poder investigar y plantear diferentes formas de resolverlas. Además, hacer el input con regex también ha sido un reto interesante porque no estamos tan familiarizadas con él.